Please elaborate how you implement your FIFO and LRU replacement algorithm.
You need to explain your design, not just paste source code here ... 

Implementation of both algorithms had the same structure in mind, but FIFO was definitely the easiest. Once the page frames were completely used, once a new value was encountered, simply replace the first used page frame with the new value. In order to accomplish this, I used the page fault counter as a tracker as well as a counter, as taking the remainder of page_faults - 1 and the page frame count yielded the index cycle needed(i.e. 1, 2 , 3, 4, 1, 2, etc.). This could be repeated for as many page frames needed. However, an issue came up with re-aligning the replacement page frame value when page hits occurred and all page frames were not used yet. The process would skip over the index where the page hit occurred and initialized the new page value in the next page frame. I had to use a counter k to set the loop counter m to the correct index once a page hit occurred in order to use all page frames correctly. Once all pages were filled, however, this was not an issue.

LRU was the hardest of the two to implement. The page hit method was the same as well as using all page frames, but the tricky part was obviously how to check when a value was used the least recently. The idea I came up with was to check all the pages used within the bound of the page frame to check which values were used. The variable k was used to decrement the loop because the further the algorithm goes back to point 0, page values that aren't used as often are more likely to show up. This allows the array temp to catch the correct values to change. If any index in temp hasn't been changed, it means that value has not been used in that frame bound, which means we can replace that page frame index without worrying about it not being the least recently used value. You could theoretically allow k to increment instead, but decrementing k allows the matching values to be cleared as early as possible and communicates the idea behind the algorithm much better than simply incrementing it. Another problem that may or may not exist is that as page frame count and reference page size increases, the amount of page faults decreases. Though where I increment the page fault counter is different than FIFO, their page fault counts should be the same regardless of the page size or page frame count. If it does differ due to the algorithms being different in terms of encountering page faults, ignore this issue since it ends up working out. If not, I still haven't figured that portion out unless there is something I'm missing about how page faults work.
